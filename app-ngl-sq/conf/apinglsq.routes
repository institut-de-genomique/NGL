#samples
GET		/api/samples													controllers.samples.api.Samples.list()
GET		/api/samples/:code												controllers.samples.api.Samples.get(code: java.lang.String)
POST	/api/samples													controllers.samples.api.Samples.save()
PUT		/api/samples/:code												controllers.samples.api.Samples.update(code:java.lang.String)

GET		/api/import-types												controllers.samples.api.ImportTypes.list()

#supports api	
GET		/api/supports													controllers.containers.api.ContainerSupports.list()
GET		/api/supports/:code												controllers.containers.api.ContainerSupports.get(code:java.lang.String)
PUT		/api/supports/:code												controllers.containers.api.ContainerSupports.update(code:java.lang.String)
HEAD	/api/supports/:code												controllers.containers.api.ContainerSupports.head(code:java.lang.String)
PUT		/api/supports/batch/state										controllers.containers.api.ContainerSupports.updateStateBatch()
PUT		/api/supports/:code/state										controllers.containers.api.ContainerSupports.updateState(code:java.lang.String)
POST	/api/supports/code												controllers.containers.api.ContainerSupports.saveCode(nbCodes:java.lang.Integer ?= 0)

#containers api
GET		/api/containers													controllers.containers.api.Containers.list()
PUT		/api/containers/:code											controllers.containers.api.Containers.update(code:java.lang.String)

#TODO a revoir plutot /api/containers/supports/categories
GET		/api/containers/container-support-categories  					controllers.containers.api.ContainerSupportCategories.list()
GET		/api/containers/:code											controllers.containers.api.Containers.get(code:java.lang.String)

PUT		/api/containers/batch/state										controllers.containers.api.Containers.updateStateBatch()
PUT		/api/containers/:code/state										controllers.containers.api.Containers.updateState(code:java.lang.String)

GET		/api/container-categories										controllers.containers.api.ContainerCategories.list()

#processes api
GET		/api/processes													controllers.processes.api.Processes.list()
GET		/api/processes/:code											controllers.processes.api.Processes.get(code:java.lang.String)
HEAD	/api/processes/:code											controllers.processes.api.Processes.head(code: java.lang.String)
POST	/api/processes/:from											controllers.processes.api.Processes.save(from: java.lang.String)
POST	/api/processes/:from/batch										controllers.processes.api.Processes.saveBatch(from: java.lang.String)
PUT		/api/processes/batch											controllers.processes.api.Processes.updateBatch()
PUT		/api/processes/:code											controllers.processes.api.Processes.update(code:java.lang.String)
PUT		/api/processes/batch/state										controllers.processes.api.Processes.updateStateBatch()
PUT		/api/processes/:code/state										controllers.processes.api.Processes.updateState(code:java.lang.String)
DELETE	/api/processes/:code											controllers.processes.api.Processes.delete(code:java.lang.String)


GET		/api/process-categories											controllers.processes.api.ProcessCategories.list()
GET		/api/process-types												controllers.processes.api.ProcessTypes.list()
GET		/api/process-types/:code										controllers.processes.api.ProcessTypes.get(code: java.lang.String)


#experiments api
GET		/api/experiments												controllers.experiments.api.Experiments.list()
GET		/api/experiments/:code											controllers.experiments.api.Experiments.get(code:java.lang.String)
POST	/api/experiments												controllers.experiments.api.Experiments.save()
PUT		/api/experiments/:code											controllers.experiments.api.Experiments.update(code:java.lang.String)
DELETE	/api/experiments/:code											controllers.experiments.api.Experiments.delete(code:java.lang.String)
PUT		/api/experiments/:code/state									controllers.experiments.api.Experiments.updateState(code:java.lang.String)
PUT		/api/experiments/:code/apply-rules/:codeRules					controllers.experiments.api.Experiments.applyRules(code: java.lang.String, codeRules: java.lang.String)
POST	/api/experiments/:code/comments									controllers.experiments.api.ExperimentComments.save(code:java.lang.String)
PUT		/api/experiments/:code/comments/:commentCode					controllers.experiments.api.ExperimentComments.update(code:java.lang.String, commentCode:java.lang.String)
DELETE	/api/experiments/:code/comments/:commentCode					controllers.experiments.api.ExperimentComments.delete(code:java.lang.String, commentCode:java.lang.String)
GET	    /api/experiments/:code/file/generation							controllers.instruments.io.IO.generateFile(code:java.lang.String)
#FDS 25/10/2017 ajout extraInstrument:java
POST	/api/experiments/:code/file/import								controllers.instruments.io.IO.importFile(code:java.lang.String, extraInstrument:java.lang.String ?= "")
POST	/api/experiments/:code/files/import								controllers.instruments.io.IO.importFiles(code:java.lang.String, extraInstrument:java.lang.String ?= "")

GET		/api/experiment-categories										controllers.experiments.api.ExperimentCategories.list()
GET		/api/experiment-types											controllers.experiments.api.ExperimentTypes.list()
GET		/api/experiment-types/:code										controllers.experiments.api.ExperimentTypes.get(code:java.lang.String)
#FDS 03/04/2020 attention le code ici est un process-code !! Le r√©sultat est la liste des experiment-types de niveau "-1" du process
GET		/api/experiment-types/:code/default-first						controllers.experiments.api.ExperimentTypes.getDefaultFirstExperiments(code:java.lang.String)
GET		/api/experiment-type-nodes										controllers.experiments.api.ExperimentTypeNodes.list()
GET		/api/experiment-type-nodes/:code								controllers.experiments.api.ExperimentTypeNodes.get(code:java.lang.String)


#reagents api
GET		/api/reagents													controllers.experiments.api.ExperimentReagents.list()

#protocols api
GET		/api/protocols													    controllers.protocols.api.Protocols.list()
GET		/api/protocols/:code												controllers.protocols.api.Protocols.get(code:java.lang.String)
PUT	/api/protocols/:code													controllers.protocols.api.Protocols.update(code:java.lang.String)
POST /api/protocols                                                         controllers.protocols.api.Protocols.save()
DELETE		/api/protocols/:code												controllers.protocols.api.Protocols.delete(code:java.lang.String)

#description-histories
POST /api/description-histories                                            controllers.descriptionHistories.api.DescriptionHistories.save()
GET /api/description-histories/:code                                             controllers.descriptionHistories.api.DescriptionHistories.get(code:java.lang.String)

#tags api
GET		/api/printing/tags												controllers.printing.api.Tags.list()
POST	/api/printing/tags/print										controllers.printing.api.Tags.print()



