# This is the main configuration file for the application.
# ~~~~~

application.name=NGL

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="ITA:BR/13B]?3@7r`4<^b49^]75RNWQfbOr<@1EuA5O6XZG<6xPq4=YvnZ/^Hh?k"

# The application languages
# ~~~~~
play.i18n.langs=["fr", "en"]

##Play NGL customisations
play.modules.enabled  += "NGLAppModule"

play.http.session = {

  # The cookie name
  cookieName = "NGL_SESSION_"${institute}"_"${ngl.env}
    
  # The max age to set on the cookie.
  # If null, the cookie expires when the user closes their browser.
  # An important thing to note, this only sets when the browser will discard the cookie.
  maxAge = "10h"
          
  # The domain to set on the session cookie
  # If null, does not set a domain on the session cookie.
  # domain = 

}

#### Play 2.6 parameter
# Restore CSRF 2.5 behavior
play.filters.csrf {
  header {
    bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }
    protectHeaders = null
  }
  bypassCorsTrustedOrigins = false
  method {
    whiteList = []
    blackList = ["POST"]
  }
  contentType.blackList = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]
}

# fix cross origin problems, to be scrutinized
play.filters.headers.contentSecurityPolicy=null

play.filters.disabled+="play.filters.hosts.AllowedHostsFilter"
play.filters.disabled+="play.filters.csrf.CSRFFilter"

# Fix URI size problems
# This section does not work, the names are not the correct ones.
akka.http {
  parsing {
    max-uri-length = 16k
  }
}

# Evolutions
evolutionplugin=disabled

###
# Configuration to NGL MySQL DB
###
db.default {
  jndiName = "ngl"
  url      = "dbc:mysql://<server_name>:<port>/NGL"
  driver   = "com.mysql.jdbc.Driver"
  username = "<user_name>"
  password = "<user_password>"
  hikaricp = {
        minimumIdle = 1
        maximumPoolSize = 2
  }
  logSql=false

}


###
# Configuration to NGL MongoDB DB
###
mongodb {
  database    = "NGL"
  servers     = "<server_name>:<port>"
  credentials = "<user_name>:<user_password>"
  defaultWriteConcern = "SAFE"
}

###
# Configuration for authentication and authorization if needed. See documentation in auth_doc.conf
# by default html authentification with no validation and authorized always
###
authentication {
 
  # authenticated session duration
  duration = 10h
 
  configured {
 	method = html
  }
  
  html.validator = "fr.cea.ig.authentication.validators.NoCheckLoginPasswordValidator"
}

authorization {

  configured {
    mode = always
  }
  
}

###
# Asset server configuration
###
asset.url="<url_to_the_asset_server>"

###
# Spring application context configuration
###
play.spring.context-path=application-context.xml


###
# Trace user action in collection UserHistory
###
useraction.trace=true

###
# NGL Environnement DEV, UAT, PROD
###
ngl.env=DEV

###
# The institute name to retrieve the good parameter if you declare several institute in description database
###
institute="<your_institute_name>"

###
# Logger Mail configuration. see logger.xml
###
mail.smtp.host = "<smtp_server>"
error.mail.from="<mailfrom>"
error.mail.to="<mailto>"


###
# URL NGL application
###
sq.url="<url_to_ngl_sq>"
bi.url="<url_to_ngl_bi>"
project.url="<url_to_ngl_project>"

play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters.gzip {

    contentType {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/javascript", "application/javascript", "application/json" ]

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}