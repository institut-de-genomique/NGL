
##### AUTHENTICATION

authentication {

  #### general configuration

  # agents authentication bypass
  # if not provided, no bypass is allowed
  agents_bypass {
    bot       = ngsrg
    Honeywell = scanner
  }

  # authenticated session duration
  duration = 10h

  # logout page
  logout_redirect = "/"

  ### configured authentication
  # the selected authenticator is
  configured {
    method = <see_method_names_below>
	# example
	# method = cas
	# method = ad
	# method = html
	# method = fixed
	
	### alternative method names
    # active directory : ad, active_directory
	# central authentication service : cas, central_authentication_service
	# html : html
	# fixed : none, dev, test, fixed
	# error : error    	
  }
  ####
  # Some methods are specific configuration
  ####
  #### active directory
  active_directory {
    server = "<server_name>"
	domain = "<domain_name>"
  }

  #### central authentication service
  central_authentication_service {
    login      = "<url_cas_login>"
	validation = "<url_cas_validation>"
  }

  #### fixed identity authenticator, default user is ngrsg
  fixed.user = ngrsg

  #### error authenticator
  # Rather pointless but it is defined so why not provide it ?
  error.message = "authentication always fails"

  #### html authentication
  # Class references may fail when using sbt run as the on the fly
  # compilation may mess with the injected validator.
  # html.validator = "fr.cea.ig.authentication.validators.UserDAOLoginPasswordValidator"
  # html.validator = "fr.cea.ig.authentication.validators.EqualsLoginPasswordValidator"
  # html.validator = "fr.cea.ig.authentication.validators.ErrorLoginPasswordValidator"
  html.validator = "fr.cea.ig.authentication.validators.NoCheckLoginPasswordValidator"

  validator.error.message = "born to fail"

}

authorization {

  #### configured authorization
  configured {
    # mode : always, never, fixed, user_dao
    mode = fixed
    # mode = always
    # mode = user_dao
	# Can specify the implementation class directly
	# class = "fr.cea.ig.authorization.authorizators.AlwaysAuthorizator" # same as mode = always
  }
  ####
  # Some mode are specific configuration
  ####
  
  # Fixed permission list for every login
  fixed = [ "reading" ]

  user_dao {
    application      = "<app_name>" #ex : ngl-sq
    user_creation    = true
    role_at_creation = "reader"
  }

}
