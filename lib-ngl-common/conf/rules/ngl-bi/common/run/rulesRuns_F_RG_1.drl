//created on: Nov 21, 2013
package rules

//declare any global variables here
declare ReadSetInfo
	lane : Lane @key
	nbClusterLane : Long @key
	readSet : ReadSet @key
	validSeqPercent : Double
end

declare LaneInfoBI
	run : Run
	lane : Lane 
	sizeReadSets : Integer 
	readSets : List 
	nbClusterLane : Long
end

//run.treatments.ngsrg.default.percentClusterIlluminaFilter=
//(run.treatments.ngsrg.default.nbClusterIlluminaFilter/run.treatments.ngsrg.default.nbClusterTotal)*100
rule "Calculate average percentClusterFilter for run"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null)
		$mapValue : Map() from $treatment.results.values()
		$nbClusterIlluminaFilter : Entry(key=="nbClusterIlluminaFilter") from $mapValue.entrySet()
		$nbClusterTotal : Entry(key=="nbClusterTotal") from $mapValue.entrySet()
		eval((Long)((PropertyValue)$nbClusterTotal.getValue()).getValue()>0)
	then
		Logger.debug("Calculate  percentClusterIlluminaFilter for run "+$run.code);
		//Calculate validSeqPercent
		Long nbClusterFilter = (Long)((PropertyValue)$nbClusterIlluminaFilter.getValue()).getValue();
		Long nbTotal = (Long)((PropertyValue)$nbClusterTotal.getValue()).getValue();
		Double percentClusterIlluminaFilter = roundValue((double)nbClusterFilter/nbTotal*100);
		//Create new PropertyValue
		PropertySingleValue propertyPercentClusterFilter = new PropertySingleValue(percentClusterIlluminaFilter);
		//Update treatment for Run
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class, 
						DBQuery.is("code", $run.code),
						DBUpdate.set("treatments.ngsrg.default.percentClusterIlluminaFilter", propertyPercentClusterFilter));
		
end 

//Create LaneInfoBI for each lane of a run :
//run : Run
//lane : Lane
//sizeReadSets : run.lanes.readSet.size
//readSets : list of ReadSetInfo
//nbClusterLane : run.lanes.treatments.ngsrg.default.nbClusterInternalAndIlluminaFilter
rule "Initialize LaneInfoBI"
	@nglBI( F_RG_1 )
	
	dialect "java"
	salience 500
	no-loop
	when
		$run : Run()
		$lane : Lane($treatment : treatments["ngsrg"], $treatment!=null,readSetCodes!=null) from $run.lanes
		$mapValue : Map() from $treatment.results.values()
       	$nbClusterLane : Entry(key == "nbClusterInternalAndIlluminaFilter") from $mapValue.entrySet()
	then
		Logger.debug("Create LaneInfoBI "+$lane.number);
		LaneInfoBI LaneInfoBI = new LaneInfoBI($run, $lane, $lane.readSetCodes.size(), new ArrayList(),(Long)((PropertyValue)$nbClusterLane.getValue()).getValue());
		insert(LaneInfoBI);
	
end

//Create ReadSetInfo for each ReadSet of a Lane
//lane : Lane
//nbClusterLane : LaneInfoBI.nbClusterLane (=lane.treatments.ngsrg.default.nbClusterInternalAndIlluminaFilter)
//readSet : ReadSet
//validSeqpercent : null
rule "Get all readSet"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 400
	no-loop
    when
        $run : Run( )
       	$lane : Lane( $treatment : treatments["ngsrg"], $treatment!=null) from $run.lanes
       	$readSet : String() from $lane.readSetCodes
       	$LaneInfoBI : LaneInfoBI(lane==$lane);
    then
    	//Get readSet from database to calculate each validSeqPercent per readSet
    	//Logger.debug("Get readSet "+$readSet);
    	ReadSet readSet = MongoDBDAO.findByCode(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, $readSet);	
    	ReadSetInfo readSetInfo = new ReadSetInfo($lane,$LaneInfoBI.getNbClusterLane(),readSet);
    	//Update LaneInfoBI
    	$LaneInfoBI.getReadSets().add(readSetInfo);
    	insert(readSetInfo);
    	update($LaneInfoBI);
end

//readSet.treatments.ngsrg.default.validSeqPercent=
//(readSet.treatments.ngsrg.default.nbCluster/lane.treatments.ngsrg.default.nbClusterInternalAndIlluminaFilter)*100


//rule "Calculate seqPercent readSet"
//	@nglBI( F_RG_1 )
//	dialect "java"
//	salience 300
//	no-loop
//	when
//		$readSetInfo : ReadSetInfo($treatment : readSet.treatments["ngsrg"], $treatment!=null, validSeqPercent==null,nbClusterLane>0)
//		$mapValue : Map() from $treatment.results.values()
//		$nbCluster : Entry(key=="nbCluster") from $mapValue.entrySet()
//	then

		//Calculate validSeqPercent
//		
//		Long nbClusterReadSet = ((Long)((PropertyValue)$nbCluster.getValue()).getValue());
//		Long nbClusterLane = $readSetInfo.getNbClusterLane();
//		Double validSeqPercent = roundValue((double)nbClusterReadSet/nbClusterLane*100);
//		//Create new PropertyValue
//		Logger.debug("Calculate validSeqPercent readSet :"+validSeqPercent);
//		PropertySingleValue propertyValidSeqPercent = new PropertySingleValue(validSeqPercent);
//		//Update treatment for ReadSet in database
//		MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class,  
//			DBQuery.is("code",$readSetInfo.getReadSet().code),
//			DBUpdate.set("treatments.ngsrg.default.validSeqPercent", propertyValidSeqPercent));
//		$readSetInfo.setValidSeqPercent(validSeqPercent);
//		update($readSetInfo);
//end

//run.lane.treatments.ngsrg.default.seqLossPercent=
//(100-SOMME(readset.treatments.ngsrg.default.validSeqPercent))
//NGL-2306 Metabarconding (tag Iair et 2ndaire) desactivation de la r√®gle
//Calculer par RG car %seq valide dans RG ou dans nouveau nouveau traitement si tag 2ndaire
//rule "Calculate seqLossPercent Lane"
//	@nglBI( F_RG_1 )
//	dialect "java"
//	salience 200
//	no-loop
//	when
//		$LaneInfoBI : LaneInfoBI(sizeReadSets == readSets.size(), $treatment : lane.treatments["ngsrg"], $treatment!=null)
//		$mapValue : Map() from $treatment.results.values()
//		$sumValidSeqPercent : Double() from accumulate (ReadSetInfo(lane==$LaneInfoBI.lane, validSeqPercent!=null, $value : validSeqPercent), sum($value))
//	then
//		Double seqLossPercent =roundValue(100-$sumValidSeqPercent);
		//Create new PropertyValue seqLossPercent
//		PropertySingleValue propertySeqLossPercent = new PropertySingleValue(seqLossPercent);
//		$mapValue.put("seqLossPercent", propertySeqLossPercent);
		//Update treatment for lane 
//		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class, 
//						DBQuery.and(DBQuery.is("code", $LaneInfoBI.getRun().code), DBQuery.is("lanes.number", $LaneInfoBI.getLane().number)),
//						DBUpdate.set("lanes.$.treatments."+$treatment.code, $treatment));
//end

rule "Calculate 1DForward basesPercent and readPercent for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
	then
		Logger.debug("Calculate 1DForward.basesPercent");
		PropertyObjectValue propertyValue1DForward = (PropertyObjectValue)$1DForward.getValue();
		Map mapPropertyValue1DForward = propertyValue1DForward.getValue();
		
		Long value1DForwardNbBases = (Long)mapPropertyValue1DForward.get("nbBases");
		Double value1DForwardBasesPercent = roundValue((double)value1DForwardNbBases/value1DForwardNbBases*100);
		mapPropertyValue1DForward.put("basesPercent", value1DForwardBasesPercent);
		
		Logger.debug("Calculate 1DForward.readsPercent");
		Long value1DForwardNbReads = (Long)mapPropertyValue1DForward.get("nbReads");
		Double value1DForwardReadsPercent = roundValue((double)value1DForwardNbReads/value1DForwardNbReads*100);
		mapPropertyValue1DForward.put("readsPercent", value1DForwardReadsPercent);
		
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class,  
			DBQuery.is("code",$run.code),
			DBUpdate.set("treatments.ngsrg.default.1DForward", propertyValue1DForward));
end



rule "Calculate 1DReverse basesPercent and readsPercent for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
		$1DReverse : Entry(key=="1DReverse") from $mapValue.entrySet()
	then
		Logger.debug("Calculate 1DReverse.basesPercent");
		
		Long value1DForwardNbBases = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbBases");
		Long value1DForwardNbReads = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbReads");
		
		PropertyObjectValue propertyValue1DReverse = (PropertyObjectValue)$1DReverse.getValue();
		Map mapPropertyValue1DReverse = propertyValue1DReverse.getValue();
		
		Long value1DReverseNbBases = (Long)mapPropertyValue1DReverse.get("nbBases");
		Double value1DReverseBasesPercent = roundValue((double)value1DReverseNbBases/value1DForwardNbBases*100);
		mapPropertyValue1DReverse.put("basesPercent", value1DReverseBasesPercent);
		
		Logger.debug("Calculate 1DReverse.readsPercent");
		Long value1DReverseNbReads = (Long)mapPropertyValue1DReverse.get("nbReads");
		Double value1DReverseReadsPercent = roundValue((double)value1DReverseNbReads/value1DForwardNbReads*100);
		mapPropertyValue1DReverse.put("readsPercent", value1DReverseReadsPercent);
		
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class,  
			DBQuery.is("code",$run.code),
			DBUpdate.set("treatments.ngsrg.default.1DReverse", propertyValue1DReverse));
end


rule "Calculate 2DAll basesPercent and readsPercent for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
		$2DAll : Entry(key=="2DAll") from $mapValue.entrySet()
	then
		Logger.debug("Calculate 2DAll.basesPercent");
		Long value1DForwardNbBases = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbBases");
		Long value1DForwardNbReads = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbReads");
		
		PropertyObjectValue propertyValue2DAll = (PropertyObjectValue)$2DAll.getValue();
		Map mapPropertyValue2DAll = propertyValue2DAll.getValue();
		
		Long value2DAllNbBases = (Long)mapPropertyValue2DAll.get("nbBases");
		Double value2DAllBasesPercent = roundValue((double)value2DAllNbBases/value1DForwardNbBases*100);
		mapPropertyValue2DAll.put("basesPercent", value2DAllBasesPercent);
		
		Logger.debug("Calculate 2DAll.readsPercent");
		Long value2DAllNbReads = (Long)mapPropertyValue2DAll.get("nbReads");
		Double value2DAllReadsPercent = roundValue((double)value2DAllNbReads/value1DForwardNbReads*100);
		mapPropertyValue2DAll.put("readsPercent", value2DAllReadsPercent);
		
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class,  
			DBQuery.is("code",$run.code),
			DBUpdate.set("treatments.ngsrg.default.2DAll", propertyValue2DAll));
end

rule "Calculate 2DPass basesPercent and nbReads for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
		$2DPass : Entry(key=="2DPass") from $mapValue.entrySet()
	then
		Logger.debug("Calculate 2DPass.basesPercent");
		
		Long value1DForwardNbBases = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbBases");
		Long value1DForwardNbReads = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbReads");
		
		PropertyObjectValue propertyValue2DPass = (PropertyObjectValue)$2DPass.getValue();
		Map mapPropertyValue2DPass = propertyValue2DPass.getValue();
		
		Long value2DPassNbBases = (Long)mapPropertyValue2DPass.get("nbBases");
		Double value2DPassBasesPercent = roundValue((double)value2DPassNbBases/value1DForwardNbBases*100);
		mapPropertyValue2DPass.put("basesPercent", value2DPassBasesPercent);
		
		Logger.debug("Calculate 2DPass.readsPercent");
		Long value2DPassNbReads = (Long)mapPropertyValue2DPass.get("nbReads");
		Double value2DPassReadsPercent = roundValue((double)value2DPassNbReads/value1DForwardNbReads*100);
		mapPropertyValue2DPass.put("readsPercent", value2DPassReadsPercent);
		
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class,  
			DBQuery.is("code",$run.code),
			DBUpdate.set("treatments.ngsrg.default.2DPass", propertyValue2DPass));
end


rule "Calculate useful basesPercent and readsPercent for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$run : Run($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
		$useful : Entry(key=="useful") from $mapValue.entrySet()
	then
		Logger.debug("Calculate useful.basesPercent");
		
		Long value1DForwardNbBases = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbBases");
		Long value1DForwardNbReads = (Long)((PropertyObjectValue)$1DForward.getValue()).getValue().get("nbReads");
		
		PropertyObjectValue propertyValueUseful = (PropertyObjectValue)$useful.getValue();
		Map mapPropertyValueUseful = propertyValueUseful.getValue();
		
		Long valueUsefulNbBases = (Long)mapPropertyValueUseful.get("nbBases");
		Double usefulBasesPercent = roundValue((double)valueUsefulNbBases/value1DForwardNbBases*100);
		mapPropertyValueUseful.put("basesPercent", usefulBasesPercent);
		
		Logger.debug("Calculate useful.readsPercent");
		Long valueUsefulNbReads = (Long)mapPropertyValueUseful.get("nbReads");
		Double usefulReadsPercent = roundValue((double)valueUsefulNbReads/value1DForwardNbReads*100);
		mapPropertyValueUseful.put("readsPercent", usefulReadsPercent);
		
		MongoDBDAO.update(InstanceConstants.RUN_ILLUMINA_COLL_NAME, Run.class,  
			DBQuery.is("code",$run.code),
			DBUpdate.set("treatments.ngsrg.default.useful", propertyValueUseful));
end


rule "Get ReadSet nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 300
	no-loop
	when
		$run : Run(categoryCode == "nanopore",$treatment : treatments["minknowBasecalling"], $treatment!=null)
	then
		Logger.debug("Get ReadSet for nanopore Run "+$run.code);
		List<ReadSet> readSets = MongoDBDAO.find(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, DBQuery.is("runCode", $run.code)).toList();
		for(ReadSet readSet : readSets){
			insert(readSet);
		}
end

rule "Add treatment minKnowBasecalling from Run to ReadSet nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 300
	no-loop
	when
		$run : Run(categoryCode == "nanopore", $treatment : treatments["minknowBasecalling"], $treatment!=null)
		$readSet : ReadSet(runCode == $run.code)
	then
		Logger.debug("Add minknowBasecalling from Run "+$run.code+" to ReadSet "+$readSet.code);
		//Copy only few values
		Map<String, PropertyValue> newResultsValue = new HashMap<String, PropertyValue>();
		newResultsValue.put("minKnowVersion",$treatment.results.get("default").get("minKnowVersion"));
		newResultsValue.put("basecallerName",$treatment.results.get("default").get("basecallerName"));
		newResultsValue.put("basecallerVersion",$treatment.results.get("default").get("basecallerVersion"));
		newResultsValue.put("configName",$treatment.results.get("default").get("configName"));
		newResultsValue.put("minknowEvents",$treatment.results.get("default").get("minknowEvents"));
		newResultsValue.put("minknowCompleteReads",$treatment.results.get("default").get("minknowCompleteReads"));
		
		Treatment treatMetrichorForReadSet = $treatment;
		treatMetrichorForReadSet.results.put("default",newResultsValue);
		$readSet.treatments.put("minknowBasecalling",treatMetrichorForReadSet);
		
		MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class,  
			              DBQuery.is("code",$readSet.code),
			              DBUpdate.set("treatments", $readSet.treatments));
end
