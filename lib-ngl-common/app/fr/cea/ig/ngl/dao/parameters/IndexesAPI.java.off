/* FDS Copie de SamplesAPI.java      MODIFS EN COURS...*/
package fr.cea.ig.ngl.dao.parameters;

import java.util.Arrays;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Singleton;

import fr.cea.ig.ngl.dao.api.APIException;
import fr.cea.ig.ngl.dao.api.APISemanticException;
import fr.cea.ig.ngl.dao.api.APIValidationException;
import fr.cea.ig.ngl.dao.api.GenericAPI;
import models.laboratory.parameter.index.Index;
//import validation.ContextValidation;


@Singleton
public class IndexesAPI extends GenericAPI<IndexesDAO, Index> {

	//private static final play.Logger.ALogger logger = play.Logger.of(IndexesAPI.class);
	
	private final List<String> AUTHORIZED_UPDATE_FIELDS = null; // aucun champ updatable
	private final List<String> DEFAULT_KEYS = Arrays.asList("code",
															"typeCode",
															"categoryCode",
															"name",
															"sequence",
															"shortName",
															"supplierName", // object
															"groupNames",   // string list
															"traceInformation");
	
	private final IndexesAPI indexApi;
	
	@Inject
	public IndexesAPI(IndexesDAO dao, IndexesAPI indexApi) {
		super(dao);
		this.indexApi= indexApi;
	}
	
	@Override
	protected List<String> authorizedUpdateFields() {
		return this.AUTHORIZED_UPDATE_FIELDS;
	}

	@Override
	protected List<String> defaultKeys() {
		return this.DEFAULT_KEYS;
	}
	
	/* FDS 13/11/2018  PAS DE CREATION  NI UPDATE POUR l'INSTANT... mais necessaire pour compilation ??????? */


	@Override
	public Index create(Index input, String currentUser) throws APIValidationException, APIException {
		throw new APISemanticException("index creation not supported");
	}

	@Override
	public Index update(Index input, String currentUser) throws APIException, APIValidationException {
		throw new APISemanticException("index update not supported");
	}

	@Override
	public Index update(Index input, String currentUser, List<String> fields) throws APIException, APIValidationException {
		throw new APISemanticException("index update not supported");
	}

	 /* attention code de Sample a adapter eventuellement...
	 * (non-Javadoc)
	 * @see fr.cea.ig.ngl.dao.api.GenericAPI#update(fr.cea.ig.DBObject, java.lang.String)
	@Override
	public Sample create(Sample input, String currentUser) throws APIValidationException, APISemanticException {
//		ContextValidation ctxVal = new ContextValidation(currentUser);
//		ctxVal.setCreationMode();
		ContextValidation ctxVal = ContextValidation.createCreationContext(currentUser);
		if (input._id == null) { 
			input.traceInformation = new TraceInformation();
			input.traceInformation.creationStamp(ctxVal, currentUser);
		} else {
			throw new APISemanticException(CREATE_SEMANTIC_ERROR_MSG); 
		}
		SampleHelper.executeSampleCreationRules(input);
		input.validate(ctxVal);
		if (!ctxVal.hasErrors()) {
			return dao.saveObject(input);
		} else {
			throw new APIValidationException(INVALID_INPUT_ERROR_MSG, ctxVal.getErrors());
		}
	}
	*/
	
	/* attention code de Sample a adapter eventuellement...
	/**
	 * Define only some fields to update (not the entire object). 
	 * <br>
	 * list of editable field list is defined in {@link #AUTHORIZED_UPDATE_FIELDS} constant
	 * @see SamplesAPI#AUTHORIZED_UPDATE_FIELDS
	 * @param input       input sample       
	 * @param currentUser current user
	 * @param fields      fields
	 * @return            updated sample
	 * @throws APIException if the code doesn't correspond to a sample 
	 * @throws APIValidationException validation failure
	 *
	@Override
	public Sample update(Sample input, String currentUser, List<String> fields) throws APIException, APIValidationException {
		Sample sampleInDb = get(input.code);
		if (sampleInDb == null) {
			throw new APIException("Sample with code " + input.code + " not exist");
		} else {
//			ValidationContext ctxVal = new ContextValidation(currentUser);
//			ctxVal.setUpdateMode();
			ContextValidation ctxVal = ContextValidation.createUpdateContext(currentUser);
			checkAuthorizedUpdateFields(ctxVal, fields);
			checkIfFieldsAreDefined(ctxVal, fields, input);
			if (!ctxVal.hasErrors()) {
				input.comments = InstanceHelpers.updateComments(input.comments, ctxVal);
				TraceInformation ti = sampleInDb.traceInformation;
				if (ti != null) {
					ti.modificationStamp(ctxVal, currentUser);
				} else {
					logger.error("traceInformation is null !!");
				}
				if (fields.contains("valuation")) {
					input.valuation.user = currentUser;
					input.valuation.date = new Date();
				}
				if (!ctxVal.hasErrors()) {
					dao.updateObject(DBQuery.and(DBQuery.is("code", input.code)), dao.getBuilder(input, fields).set("traceInformation", ti));
					return get(input.code);
				} else {
					throw new APIValidationException("Invalid fields", ctxVal.getErrors());
				}
			} else {
				throw new APIValidationException("Invalid Sample object", ctxVal.getErrors());
			}
		}
	}*/
	
	 /* 
	 * attention code de Sample a adapter eventuellement...
	 */
	/* (non-Javadoc)
	 * @see fr.cea.ig.ngl.dao.api.GenericAPI#update(fr.cea.ig.DBObject, java.lang.String)
	 * 
	@Override
	public Sample update(Sample input, String currentUser) throws APIException, APIValidationException {
		Sample sampleInDb = get(input.code);
		if (sampleInDb == null) {
			throw new APIException("Sample with code " + input.code + " not exist");
		} else {
//			ContextValidation ctxVal = new ContextValidation(currentUser);
//			ctxVal.setUpdateMode();
			ContextValidation ctxVal = ContextValidation.createUpdateContext(currentUser);
			if (input.traceInformation != null) {
				input.traceInformation.modificationStamp(ctxVal, currentUser);
			} else {
				logger.error("traceInformation is null !!");
			}
			input.comments = InstanceHelpers.updateComments(input.comments, ctxVal);
			input.validate(ctxVal);
			if (!ctxVal.hasErrors()) {
				dao.updateObject(input);
				return get(input.code);
			} else {
				throw new APIValidationException("Invalid Sample object", ctxVal.getErrors());
			}
		}
	}
	*/
	
	
}
