package controllers.analyses.api;

// TO DO: use packed construction of query
//public class AnalysesOLD extends DocumentController<Analysis> {
//
//	private static final play.Logger.ALogger logger = play.Logger.of(AnalysesOLD.class);
//	
//	private final static List<String> authorizedUpdateFields = Arrays.asList("code","masterReadSetCodes","readSetCodes");
//	
//	private final AnalysisAPI api;
//	
//	private final Form<Valuation>            valuationForm; 
//	private final Form<State>                stateForm; 
//	private final Form<AnalysesBatchElement> batchElementForm; 
//	private final Form<QueryFieldsForm>      updateForm; 
//	private final AnalysisWorkflows          workflows;
//	private final LazyRules6Actor            rulesActor;
//	
////	@Inject
////	public Analyses(AnalysisAPI api, NGLContext ctx, AnalysisWorkflows workflows) {
////		super(ctx,InstanceConstants.ANALYSIS_COLL_NAME, Analysis.class);
////		this.api              = api;
////		this.valuationForm    = getNGLContext().form(Valuation.class);
////		this.stateForm        = getNGLContext().form(State.class);
////		this.batchElementForm = getNGLContext().form(AnalysesBatchElement.class);
////		this.updateForm       = getNGLContext().form(QueryFieldsForm.class);
////		this.rulesActor       = getNGLContext().rules6Actor(); 
////		this.workflows        = workflows;
////	}
//	
//	@Inject
//	public AnalysesOLD(AnalysisAPI api, NGLApplication app, AnalysisWorkflows workflows) {
//		super(app,InstanceConstants.ANALYSIS_COLL_NAME, Analysis.class);
//		this.api              = api;
//		this.valuationForm    = getNGLContext().form(Valuation.class);
//		this.stateForm        = getNGLContext().form(State.class);
//		this.batchElementForm = getNGLContext().form(AnalysesBatchElement.class);
//		this.updateForm       = getNGLContext().form(QueryFieldsForm.class);
//		this.rulesActor       = getNGLContext().rules6Actor(); 
//		this.workflows        = workflows;
//	}
//
//	//	@Permission(value={"reading"})
//	@Authenticated
//	@Historized
//	@Authorized.Read
//	public Result list() {
//		AnalysesSearchForm form = filledFormQueryString( AnalysesSearchForm.class);
//		Query q = getQuery(form);
//		BasicDBObject keys = getKeys(form);
//		if (form.datatable) {			
//			MongoDBResult<Analysis> results = mongoDBFinder(form, q, keys);	
//			return MongoStreamer.okStreamUDT(results);
//		}
//		MongoDBResult<Analysis> results = mongoDBFinder(form, q, keys);							
//		return MongoStreamer.okStream(results);
//	}
//	
//	private Query getQuery(AnalysesSearchForm form) {
//		List<Query> queries = new ArrayList<>();
//		Query query = null;
//		
//		if (StringUtils.isNotBlank(form.stateCode)) { //all
//			queries.add(DBQuery.is("state.code", form.stateCode));
//		} else if (CollectionUtils.isNotEmpty(form.stateCodes)) { //all
//			queries.add(DBQuery.in("state.code", form.stateCodes));
//		}
//		
//		if (StringUtils.isNotBlank(form.validCode)) { //all
//			queries.add(DBQuery.is("valuation.valid", TBoolean.valueOf(form.validCode)));
//		}
//		if (CollectionUtils.isNotEmpty(form.resolutionCodes)) { //all
//			queries.add(DBQuery.in("valuation.resolutionCodes", form.resolutionCodes));
//		}
//		
//		if (CollectionUtils.isNotEmpty(form.projectCodes)) { //all
//			queries.add(DBQuery.in("projectCodes", form.projectCodes));
//		} else if (StringUtils.isNotBlank(form.projectCode)) { //all
//			queries.add(DBQuery.in("projectCodes", form.projectCode));
//		}
//		
//		if (CollectionUtils.isNotEmpty(form.sampleCodes)) { //all
//			queries.add(DBQuery.in("sampleCodes", form.sampleCodes));
//		} else if (StringUtils.isNotBlank(form.sampleCode)) { //all
//			queries.add(DBQuery.in("sampleCodes", form.sampleCode));
//		}
//		
//		if (CollectionUtils.isNotEmpty(form.typeCodes)) { //all
//			queries.add(DBQuery.in("typeCode", form.typeCodes));
//		}
//				
//		if (StringUtils.isNotBlank(form.regexCode)) { //all
//			queries.add(DBQuery.regex("code", Pattern.compile(form.regexCode)));
//		}
//		
//		if (StringUtils.isNotBlank(form.analyseValuationUser)) {
//			queries.add(DBQuery.is("valuation.user", form.analyseValuationUser));
//		}
//		
//		
//		queries.addAll(NGLControllerHelper.generateQueriesForProperties(form.properties, Level.CODE.Analysis, "properties"));
//		queries.addAll(NGLControllerHelper.generateQueriesForTreatmentProperties(form.treatmentProperties, Level.CODE.Analysis, "treatments"));
//		
//		if (CollectionUtils.isNotEmpty(form.existingFields)) { //all
//			for(String field : form.existingFields){
//				queries.add(DBQuery.exists(field));
//			}		
//		}
//		
//		if (CollectionUtils.isNotEmpty(form.notExistingFields)) { //all
//			for(String field : form.notExistingFields){
//				queries.add(DBQuery.notExists(field));
//			}
//		}
//		
//		if (queries.size() > 0) {
//			query = DBQuery.and(queries.toArray(new Query[queries.size()]));
//		}
//		
//		return query;
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result save() {
//		
//		Form<Analysis> filledForm = getMainFilledForm();
//		Analysis input = filledForm.get();
//		
//		if (input._id != null)
//			return badRequest("use PUT method to update the analysis");
//
//		input.traceInformation = new TraceInformation();
//		input.traceInformation.setTraceInformation(getCurrentUser());
//
//		if (input.state == null) {
//			input.state = new State();
//		}
//		input.state.code = "N";
//		input.state.user = getCurrentUser();
//		input.state.date = new Date();
//		
//		if (input.masterReadSetCodes != null && input.masterReadSetCodes.size() > 0)
//			updateAnalysis(input);			
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors());
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm);
////		ctxVal.setCreationMode();
//		ContextValidation ctxVal = ContextValidation.createCreationContext(getCurrentUser(), filledForm);
//		input.validate(ctxVal);	
//		
//		if (!ctxVal.hasErrors()) {
//			input = saveObject(input);
//			// TO DO Update ReadSet
//			return ok(Json.toJson(input));
//		}
//		// return badRequest(filledForm.errors-AsJson());
//		return badRequest(errorsAsJson(ctxVal.getErrors()));
//	}
//	
//	
//
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result update(String code){
////		Analysis objectInDB =  getObject(code);
//		Analysis objectInDB =  api.getObject(code);
//		if (objectInDB == null) {
//			return badRequest("Analysis with code "+code+" does not exist");
//		}
//		
//		Form<QueryFieldsForm> filledQueryFieldsForm = filledFormQueryString(updateForm, QueryFieldsForm.class);
//		QueryFieldsForm queryFieldsForm = filledQueryFieldsForm.get();
//		Form<Analysis> filledForm = getMainFilledForm();
//		Analysis input = filledForm.get();
//		
//		if (queryFieldsForm.fields == null) {
//			if (input.code.equals(code)) {
//				if (input.traceInformation != null) {
//					input.traceInformation = getUpdateTraceInformation(input.traceInformation);
//				} else {
//					logger.error("traceInformation is null !!");
//				}
//				if (!objectInDB.state.code.equals(input.state.code)) {
//					return badRequest("you cannot change the state code. Please used the state url ! ");
//				}
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors()); 
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm); 
////				ctxVal.setUpdateMode();
//				ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm); 
//				input.validate(ctxVal);
//				if (!ctxVal.hasErrors()) {
//					updateObject(input);
//					// TODO: Update READSET
//					return ok(Json.toJson(input));
//				}
//				return badRequest(errorsAsJson(ctxVal.getErrors()));
//			} else {
//				return badRequest("Analysis code are not the same");
//			}
//		} else { //update only some authorized properties
////			ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors()); 	
////			ValidationContext ctxVal = new ContextValidation(getCurrentUser(), filledForm); 	
////			ctxVal.setUpdateMode();
//			ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm); 
//			validateAuthorizedUpdateFields(ctxVal, queryFieldsForm.fields, authorizedUpdateFields);
//			validateIfFieldsArePresentInForm(ctxVal, queryFieldsForm.fields, filledForm);
//			
//			if (!ctxVal.hasErrors() && queryFieldsForm.fields.contains("code")) {
//				ctxVal.setCreationMode();
//				CommonValidationHelper.validateCodePrimary(ctxVal, input, collectionName);
//				// TODO Update READSET
//			}
//			if (!ctxVal.hasErrors()) {
//				updateObject(DBQuery.and(DBQuery.is("code", code)), 
//						getBuilder(input, queryFieldsForm.fields).set("traceInformation", getUpdateTraceInformation(objectInDB.traceInformation)));
//				if (queryFieldsForm.fields.contains("code") && null != input.code) {
//					code = input.code;
//				}
////				return ok(Json.toJson(getObject(code)));
//				return ok(Json.toJson(api.getObject(code)));
//			} else {
//				return badRequest(errorsAsJson(ctxVal.getErrors()));
//			}			
//		}
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result state(String code){
//		Analysis objectInDB = getObject(code);
//		if (objectInDB == null)
//			return notFound();
//		Form<State> filledForm =  getFilledForm(stateForm, State.class);
//		State state = filledForm.get();
//		state.date = new Date();
//		state.user = getCurrentUser();
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors());
//		ContextValidation ctxVal = ContextValidation.createUndefinedContext(getCurrentUser(), filledForm);
//		workflows.setState(ctxVal, objectInDB, state);
//		if (!ctxVal.hasErrors()) {
//			return ok(Json.toJson(getObject(code)));
//		} else {
//			return badRequest(errorsAsJson(ctxVal.getErrors()));
//		}
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result stateBatch(){
//		List<Form<AnalysesBatchElement>> filledForms =  getFilledFormList(batchElementForm, AnalysesBatchElement.class);
//		List<DatatableBatchResponseElement> response = new ArrayList<>(filledForms.size());
//		for (Form<AnalysesBatchElement> filledForm: filledForms) {
//			AnalysesBatchElement element = filledForm.get();
//			Analysis objectInDB = getObject(element.data.code);
//			if (objectInDB != null) {
//				State state = element.data.state;
//				state.date = new Date();
//				state.user = getCurrentUser();
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors());
//				ContextValidation ctxVal = ContextValidation.createUndefinedContext(getCurrentUser(), filledForm);
//				workflows.setState(ctxVal, objectInDB, state);
//				if (!ctxVal.hasErrors()) {
//					response.add(new DatatableBatchResponseElement(OK, getObject(objectInDB.code), element.index));
//				} else {
//					response.add(new DatatableBatchResponseElement(BAD_REQUEST,errorsAsJson(ctxVal.getErrors()), element.index));
//				}
//			} else {
//				response.add(new DatatableBatchResponseElement(BAD_REQUEST, element.index));
//			}
//		}		
//		return ok(Json.toJson(response));
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result valuation(String code){
//		Analysis objectInDB = getObject(code);
//		if (objectInDB == null) {
//			return notFound();
//		}
//		Form<Valuation> filledForm =  getFilledForm(valuationForm, Valuation.class);
//		Valuation input = filledForm.get();
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors());
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm);
////		ctxVal.setUpdateMode();
//		ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm);
//		input.date = new Date();
//		input.user = getCurrentUser();
//		CommonValidationHelper.validateValuationRequired(ctxVal, objectInDB.typeCode, input);
//		if (!ctxVal.hasErrors()) {
//			updateObject(DBQuery.and(DBQuery.is("code", code)), DBUpdate.set("valuation", input)
//					.set("traceInformation", getUpdateTraceInformation(objectInDB.traceInformation)));
//										
//			objectInDB = getObject(code);
//			workflows.nextState(ctxVal, objectInDB);
//			return ok(Json.toJson(objectInDB));
//		} else {
//			return badRequest(errorsAsJson(ctxVal.getErrors()));
//		}
//	}
//
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result valuationBatch(){
//		List<Form<AnalysesBatchElement>> filledForms =  getFilledFormList(batchElementForm, AnalysesBatchElement.class);
//		List<DatatableBatchResponseElement> response = new ArrayList<>(filledForms.size());
//		
//		for(Form<AnalysesBatchElement> filledForm: filledForms){
//			AnalysesBatchElement element = filledForm.get();
//			Analysis objectInDB = getObject(element.data.code);
//			if (objectInDB != null) {
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors());
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm);
////				ctxVal.setUpdateMode();
//				ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm);
//				element.data.valuation.date = new Date();
//				element.data.valuation.user = getCurrentUser();
//				CommonValidationHelper.validateValuationRequired(ctxVal, objectInDB.typeCode, element.data.valuation);
//				if (!ctxVal.hasErrors()) {
//					updateObject(DBQuery.and(DBQuery.is("code", objectInDB.code)), 
//							                 DBUpdate.set("valuation", element.data.valuation)
//							                         .set("traceInformation", getUpdateTraceInformation(objectInDB.traceInformation)));
//					objectInDB = getObject(objectInDB.code);
//					workflows.nextState(ctxVal, objectInDB);
//					response.add(new DatatableBatchResponseElement(OK, objectInDB, element.index));
//				} else {
//					response.add(new DatatableBatchResponseElement(BAD_REQUEST,errorsAsJson(ctxVal.getErrors()), element.index));
//				}
//			} else {
//				response.add(new DatatableBatchResponseElement(BAD_REQUEST, element.index));
//			}
//		}		
//		return ok(Json.toJson(response));
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result properties(String code){
//		Analysis objectInDB = getObject(code);
//		if (objectInDB == null)
//			return notFound();
//			
//		Form<Analysis> filledForm = getMainFilledForm();
//		Map<String, PropertyValue> properties = filledForm.get().properties;
//		
////		ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors()); 
////		ValidationContext ctxVal = new ContextValidation(getCurrentUser(), filledForm); 
////		ctxVal.setUpdateMode();
//		ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm); 
//		// TODO AnalysisValidationHelper.validateAnalysisType(objectInDB.typeCode, properties, ctxVal);
//		if (!ctxVal.hasErrors()) {
//		    updateObject(DBQuery.and(DBQuery.is("code", objectInDB.code)), DBUpdate.set("properties", properties)
//					.set("traceInformation", getUpdateTraceInformation(objectInDB.traceInformation)));
//			objectInDB = getObject(objectInDB.code);
//			return ok(Json.toJson(objectInDB));		
//		} else {
//			return badRequest(errorsAsJson(ctxVal.getErrors()));
//		}		
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result propertiesBatch() {
//		List<Form<AnalysesBatchElement>> filledForms =  getFilledFormList(batchElementForm, AnalysesBatchElement.class);
//		List<DatatableBatchResponseElement> response = new ArrayList<>(filledForms.size());
//		
//		for(Form<AnalysesBatchElement> filledForm: filledForms) {
//			AnalysesBatchElement element = filledForm.get();
//			Analysis objectInDB = getObject(element.data.code);
//			if (objectInDB != null) {
////				ContextValidation ctxVal = new ContextValidation(getCurrentUser(), filledForm.errors()); 
////				ValidationContext ctxVal = new ContextValidation(getCurrentUser(), filledForm); 
////				ctxVal.setUpdateMode();
//				ContextValidation ctxVal = ContextValidation.createUpdateContext(getCurrentUser(), filledForm); 
//				Map<String, PropertyValue> properties = element.data.properties;
//				//TODO AnalysisValidationHelper.validateAnalysisType(objectInDB.typeCode, properties, ctxVal);
//				if (!ctxVal.hasErrors()) {
//					updateObject(DBQuery.and(DBQuery.is("code", objectInDB.code)), DBUpdate.set("properties", properties)
//							.set("traceInformation", getUpdateTraceInformation(objectInDB.traceInformation)));				   							
//				    response.add(new DatatableBatchResponseElement(OK, getObject(element.data.code), element.index));
//				} else {
//					response.add(new DatatableBatchResponseElement(BAD_REQUEST, errorsAsJson(ctxVal.getErrors()), element.index));
//				}
//			} else {
//				response.add(new DatatableBatchResponseElement(BAD_REQUEST, element.index));
//			}
//		}		
//		return ok(Json.toJson(response));
//	}
//	
////	@Permission(value={"writing"})
//	@Authenticated
//	@Historized
//	@Authorized.Write
//	public Result applyRules(String code, String rulesCode)	{
//		Analysis objectInDB = getObject(code);
//		if (objectInDB == null) {
//			return notFound();
//		}		
//		// Outside of an actor and if no reply is needed the second argument can be null
//		rulesActor.tellMessage(rulesCode,objectInDB);
//		return ok();
//	}
//	
//	
//	// transitional
//	@Override protected Analysis getObject(String code, BasicDBObject keys) { return api.getObject(code, keys); }
//	@Override protected Analysis getObject(String code)                     { return api.getObject(code);       }
//	@Override protected Analysis getObject(Query query)                     { return api.getObject(query);      }
//	@Override protected boolean  isObjectExist(String code)                 { return api.isObjectExist(code);   }	
//	@Override protected boolean  isObjectExist(Query query)                 { return api.isObjectExist(query);  }
//	@Override protected Analysis saveObject(Analysis o)                     { return api.dao_saveObject(o);     }
//	
////	protected void updateObject(T o) {
////		MongoDBDAO.update(collectionName, o);
////	}
////	
////	protected void updateObject(Query query, Builder builder){
////		MongoDBDAO.update(collectionName, type, query, builder);
////	}
////	
////	protected void deleteObject(String code){
////		MongoDBDAO.deleteByCode(collectionName,  type, code);
////	}
//	
//}
